{"version":3,"sources":["components/Contact.js","components/Highlights.js","components/Experience.js","App.js","serviceWorker.js","index.js"],"names":["Contact","react_default","a","createElement","className","Component","Highlights","Experience","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","company","title","tech","split","map","t","Badge","pill","color","style","marginRight","fontSize","details","e","App","src_components_Contact","padding","width","src_components_Highlights","src_components_Experience","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48c1bccb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Contact.css\";\n\nclass Contact extends Component {\n  render() {\n    return (\n        <div className=\"contact-info\">\n          20004 Sparhawk Terrace, Pflugerville, TX 78660 | 914.263.7411 |\n          rparanjothy@gmail.com\n        </div>\n       \n    );\n  }\n}\n\nexport default Contact;\n","import React, { Component } from \"react\";\nimport \"./Highlights.css\";\n\nclass Highlights extends Component {\n  render() {\n    return (\n      <div className=\"highlight-info\">\n        <ul className=\"skill-list\">\n          <li> Cloud Computing </li>\n          <li> Full-Stack Development </li>\n          <li> API Development </li>\n          <li> Large Scale Data Pipelines </li>\n          <li> Data Analytics</li>\n          <li> Agile Methodologies</li>\n          <li> Java</li>\n          <li> Python</li>\n          <li> NodeJS</li>\n          <li> C#</li>\n          <li> UNIX Shell Scripting</li>\n          <li> SQL / NoSQL / PLSQL</li>\n          <li> Microservices </li>\n          <li> Leadership</li>\n          <li> People Management</li>\n          <li> Technical Communication</li>\n          <li> Risk Mitigation</li>\n          <li> Dev Ops / Web Ops </li>\n          <li> Software Quality</li>\n          <li> Reliability Quality</li>\n\n          {/* <li> pandas|numpy|scipy|scapy|sklearn|pillow|itertools</li> */}\n\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Highlights;\n","import React, { Component } from \"react\";\nimport \"./Experience.css\";\nimport { Badge } from \"reactstrap\";\n\nclass Experience extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"experience-box\">\n        <div className=\"experience-company\"><h3>{this.props.company}</h3></div>\n        <div className=\"experience-title\"><h6>{this.props.title}</h6></div>\n        <div className=\"experience-tech\">\n          {this.props.tech\n            ? this.props.tech.split(\",\").map(t => (\n                \n                  <Badge pill color=\"primary\" style={{ marginRight: \"5px\", fontSize:\"12px\"}} >\n                    {t}\n                  </Badge>\n                \n              ))\n            : null}\n        </div>\n        <div className=\"experience-details\">\n          {this.props.details.split(\"• \").map(e => (\n            <div>{e}</div>\n          ))}\n        </div>\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default Experience;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Contact from \"./components/Contact\";\nimport Highlights from \"./components/Highlights\";\nimport Experience from \"./components/Experience\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2>Ramkumar Paranjothy</h2>\n          <Contact />\n        </header>\n<div>\n  <div className=\"summary\" style={{padding:\"20px\"}}>\n  I am highly talented and skilled IT professional with 14+ years of progressive experience in driving and delivering medium to large scale IT projects for major retail e-commerce and pharmaceutical customers. Expertise in Cloud Computing (Google Cloud / PCF), Container Technologies, Object Oriented Programming, Full Stack Development using MERN stack, Data Analytics (Python), API development (Java / Python / NodeJS / C#), Data Engineering, SQL / NoSQL, Data Pipelines, UNIX Shell-Scripting, Program/Project Management, Quality Engineering, DevOps/Reliability Engineering, Automation and Tooling.\n  </div>\n</div>\n        <div className=\"profile\">\n          <div className=\"skills\" style={{ width: \"20%\" }}>\n            <Highlights />\n          </div>\n          <div className=\"experience container\">\n            <Experience\n              tech=\"Java,Python,Google Cloud(GCP),Cloud Foundry,DB2,Cloud Functions,Pub/Sub,DataFlows,Beam,Docker,SpringBoot,NodeJS,React,NGINX,Cassandra,Redis,TWS,Ab-Initio\"\n              company=\"The Home Depot\"\n              title=\"Technical Lead | March 2013 – current\"\n              details=\"Build scalable “Serverless data pipelines” using Google DataFlow SDK / Apache Beam SDK to transform and load high-volume data to support new user experiences on www.homedepot.com.\n• Engineer process automation and orchestration using Google cloud storage, cloud functions and pub/sub.\n• Convert file based ETL batch jobs into cloud-based real time data pipelines using NodeJS, pub/sub and\nRedis.\n• Invented a custom in-memory change capture pattern to identify incremental data upserts by leveraging\nRedis instead ETL master files.\n• Implemented a full-stack SPA (Single Page Application) solution using ReactJS, Express, NodeJS,\nBootstrap, Flex, NGINX and Google Cloud to inquire data from cloud-based Postgres service.\n• Developed a full-stack web application using Python Flask, pandas, ReactJS and gunicorn to perform data\nanalytics on item promotions and discounts.\n• Containerized custom React and NodeJS applications / SpringBoot applications/ tools / utilities using\nDocker.\n• Developed several REST APIs using SpringBoot to perform CRUD operations on store pricing data model.\n• Developed and enhanced several Repository, Service, DAO, Model and Controller classes used by DaaS\nAPIs built using SpringBoot.\n• Enhanced Service and DAO layers used by DaaS applications (SpringBoot) to support data retrieval from\nCassandra for new features/dimensions.\n• Implement feature enhancements to microservices using SpringBoot, Embedded Cassandra, TestNG and\nGoogle BiqQuery.\n• Build tools using pandas, itertools to programmatically generate feeds to onboard data to test new features\nintegrations with the proprietary e-commerce platform.\n• Implemented an automated solution to support continuous testing for integrations between domain,\naggregation and orchestration service layers using Python Flask, MySQL and Pivotal Cloud Foundry.\n• Develop tools using NodeJS to generate and publish payloads to Pub/Sub topics to validate real time\nprocessing of price, attributes, inventory and image conversion.\n• Designed and developed REST APIs using Python (Flask, Pillow and pandas) for downloading digital assets from source servers, validating image resizing, image resolution validation, image compression and persistence in cloud storage.\n• Simulate production like data using C#, Python and NodeJS Streams (through2, split2) to verify integration with downstream interfacing applications.\n• Develop CI-CD pipelines to build, test and deploy applications to Google Compute Engine instances.\n• Drive Scrum, Sprint grooming, Prioritization and Retro meetings with the team.\n• Provided leadership skills to execute the project; resolve incidents and mitigate site outage situations.\n• Built numerous analytical reports like Order Gap Report, Top SKU report, Error rate report (Pickup in\nstore and Appliance Orders) and Error Rate Alerts using DB2, SQL, ShellScripts and Cron.\n• Performed overall site health assessment, site operational metrics generation, data analytics to detect patterns that indicate a potential threat, prevent site outage situations, develop Splunk dashboards and alerts\nand ensure enhanced online shopping experience to customers.\n• Developed C#/SQL/UNIX tools to generate, monitor and trend KPI metrics to identify patterns for normal\nand abnormal operational conditions.\n• Designed and developed an automated UNIX tool to migrate catalog data for selective SKUs from a source\ndatabase to any QA/Dev database to eliminate 4-day full feed processing in lower life cycle environments.\"\n            />\n\n            <Experience\n              tech=\"INFORMATICA,Oracle,PL/SQL,Shell Scripts,TWS\"\n              company=\"GlaxoSmithKline\"\n              title=\"Technical Consultant | January 2011 – March 2012\"\n              details=\"• Showcased 65% run time reduction for a weekly data distribution process and brought down the run time from 18 hours to 6.5 hours using PL/SQL bulk collections, recursive sub query factoring, analytical functions, scalar sub query caching and SQL performance tuning. \n          • Developed tools to monitor and identify expensive SQLs using Active Session History for continued performance improvement considerations.\n          • Instrumented numerous PL/SQL code for system performance metrics gathering.\n          • Programmed a solution to track and validate the quality of data migrations from legacy application to a web based Oracle On-Demand CRM application using PL/SQL and UNIX.\n          • Automated the manual data seeding and distribution process for samples, details and vouchers used during new drug launch.\n          • Developed and deployed an automated on-demand UNIX batch process which FTPs massive Rx growth & non retail data to 3rd party service provider’s [Medimedia] external facing system.\n          • Implemented a PL/SQL solution to reduce the licensing cost by deactivating the credentials inactive reps by interfacing with the HR systems.\n          • Developed a PL/SQL solution to achieve enormous data reduction by controlled purging algorithm.\n          • Designed and developed a PL/SQL solution to build a metrics table which helps to identify the optimum date range for each territory / district to extract the customer data that falls within the defined threshold limit.\"\n            />\n            <Experience\n              tech=\"Java,J2EE,PowerBuilder,Pl/Sql,Oracle,UNIX Shell Scripts,autosys\"\n              company=\"PepsiCo-BIS, Valhalla, New York\"\n              title=\"Technical Lead | October 2008 – December 2010\"\n              details=\"\n        Demonstrated leadership by owning responsibility and delegating tasks and mentoring the team.\n• Served as an application SME.\n• Diagnosed and resolved performance bottlenecks in pricing using multi-threading and tuning complex\nSQLs.\n• Designed, developed, system tested and deployed more than 130 application enhancements and 3 RICEFs\nusing PowerBuilder 9, PL/SQL Objects, UNIX Shell Scripts and INFORMATICA.\"\n            />\n            <Experience\n              tech=\"Java,J2EE,PowerBuilder,Pl/Sql,Oracle,UNIX Shell Scripts,autosys\"\n              company=\"Wipro Technologies (PepsiCo)\"\n              title=\"Senior Project Engineer |  June 2005 – October 2008\"\n              details=\"• Designed, developed and unit tested production break-fix in PowerBuilder 9 and Oracle PL/SQL.\n      • Implemented visual control dashboards to monitor the project progress.\n      • Developed and unit tested a plug-in utility which embeds into the systems PL/SQL code and enables the application support teams to achieve better control over the concentrate syrup’s volume data and the payments and accruals [AP/GL] transactions.\n      • Contributed towards the documentation and maintenance of all unit and system testing test cases and test plans.\n      • Designed, developed and unit tested PowerBuilder 9 and Oracle PL/SQL objects which ensured proper handshake between legacy mainframe applications and the EPM while transmitting volume, customer and membership feed files.\n• Developed and tested a data recycling engine which recycles the feed records with business validation errors.\n  \"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}